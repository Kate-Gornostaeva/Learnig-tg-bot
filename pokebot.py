import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.types import Message
import requests
from conf import TOKEN
from googletrans import Translator


bot = Bot(token=TOKEN)
dp = Dispatcher()
translator = Translator()


def get_pokemon_info(pokemon_name):
    response = requests.get(f'https://pokeapi.co/api/v2/pokemon/{pokemon_name.lower()}')
    if response.status_code != 200:
        return None
    pokemon_data = response.json()
    return pokemon_data


def get_pokemon_species_info(species_url):
    response = requests.get(species_url)
    if response.status_code == 200:
            return response.json()
    return None

def translate_description(text):
    try:
        translated = translator.translate(text, src='en', dest='ru')
        return translated.text
    except Exception:
        return text + "\n\n(–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–ø–∏—Å–∞–Ω–∏–µ)"


def get_pokemon_description(pokemon_data):
    species_url = pokemon_data['species']['url']
    species_data = get_pokemon_species_info(species_url)

    if species_data:
        for entry in species_data['flavor_text_entries']:
            if entry['language']['name'] == 'en':
                description = entry['flavor_text'].replace('\n', ' ').replace('\f', ' ')
                return translate_description(description)
    return "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ."

#–ò–∑–≤–ª–µ–∫–∞–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–∫–µ–º–æ–Ω–∞
def get_pokemon_image_url(pokemon_data):
    if 'other' in pokemon_data['sprites'] and 'official-artwork' in pokemon_data['sprites']['other']:
        return pokemon_data['sprites']['other']['official-artwork']['front_default']
    return pokemon_data['sprites']['front_default']


@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–æ–∫–µ–º–æ–¥–µ–∫—Å. üéÆ\n\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ –∏–º—è –ø–æ–∫–µ–º–æ–Ω–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä 'pikachu', "
        "–∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –µ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ.\n\n"
        "–ü–æ–ø—Ä–æ–±—É–π: charizard, bulbasaur, mewtwo, ditto"
    )


@dp.message()
async def send_pokemon_info(message: Message):
    pokemon_name = message.text.strip()
    pokemon_data = get_pokemon_info(pokemon_name)

    if not pokemon_data:
        await message.answer(f"–ü–æ–∫–µ–º–æ–Ω '{pokemon_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–∫–µ–º–æ–Ω–µ
    image_url = get_pokemon_image_url(pokemon_data)
    description = get_pokemon_description(pokemon_data)
    types = [t['type']['name'] for t in pokemon_data['types']]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    info = (
        f"–ò–º—è: {pokemon_data['name'].capitalize()}\n"
        f"–¢–∏–ø: {', '.join(types).title()}\n"
        f"–†–æ—Å—Ç: {pokemon_data['height'] / 10} –º\n"
        f"–í–µ—Å: {pokemon_data['weight'] / 10} –∫–≥\n\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {description}"
    )

    await message.answer_photo(image_url, caption=info)


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
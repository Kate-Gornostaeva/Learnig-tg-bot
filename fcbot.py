import asyncio
import logging
import random
import requests
import sqlite3
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from conf import TOKEN, EXCHANGE_API_KEY


bot = Bot(token=TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)


button_register = KeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
button_exchange_rates = KeyboardButton(text='–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
button_tips= KeyboardButton(text='–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏')
button_finances= KeyboardButton(text='–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã')

keyboards = ReplyKeyboardMarkup(keyboard=[
    [button_register, button_exchange_rates],
    [button_tips, button_finances]
], resize_keyboard=True)

conn = sqlite3.connect('user.db')
cur = conn.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,        
        name TEXT NOT NULL,
        category1 TEXT,
        category2 TEXT,
        category3 TEXT,
        expenses1 REAL,
        expenses2 REAL,
        expenses3 REAL
    )
''')
conn.commit()

class FinanceForm(StatesGroup):
    category1 = State()
    expenses1 = State()
    category2 = State()
    expenses2 = State()
    category3 = State()
    expenses3 = State()


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞-—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞! –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π:", reply_markup=keyboards)

@dp.message(F.text == '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def register(message: types.Message):
    telegram_id = message.from_user.id
    name = message.from_user.full_name

    cur.execute ('''SELECT * FROM users WHERE telegram_id = ?''', (telegram_id,))
    user = cur.fetchone()
    if user :
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        cur.execute ('''INSERT INTO users (telegram_id, name) VALUES (?, ?)''', (telegram_id, name))
        conn.commit()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!")

@dp.message(F.text == '–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç')
async def exchange_rates(message: types.Message):
    url = f'https://v6.exchangerate-api.com/v6/{EXCHANGE_API_KEY}/latest/USD'
    try:
        response = requests.get(url)
        data = response.json()
        if response.status_code != 200:
            await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç')
            return
        usd_to_rub = data['conversion_rates']['RUB']
        euro_to_usd = data['conversion_rates']['EUR']
        euro_to_rub = (1 /euro_to_usd) * usd_to_rub
        await message.answer(f'–ö—É—Ä—Å USD/RUB: {usd_to_rub:.2f}\n'
                             f'–ö—É—Ä—Å EUR/USD: {euro_to_usd:.2f}\n'
                             f'–ö—É—Ä—Å EUR/RUB: {euro_to_rub:.2f}')

    except Exception as e:
        await message.answer(f'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç: {e}')

@dp.message(F.text == '–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏')
async def tips(message: types.Message):
    tips = [
        "–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫ ‚Äî –Ω–µ –º—É–∑–µ–π! –ù–µ —Ö—Ä–∞–Ω–∏ —Ç–∞–º —ç–∫—Å–ø–æ–Ω–∞—Ç—ã –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞.–ó–∞–±—ã—Ç—ã–π –æ–≥—É—Ä–µ—Ü ‚Äî —ç—Ç–æ –Ω–µ –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç, –∞ –±—É–¥—É—â–∏–π –∫–æ–º–ø–æ—Å—Ç. –ü–ª–∞–Ω–∏—Ä—É–π –º–µ–Ω—é –∏ –µ—à—å –æ—Å—Ç–∞—Ç–∫–∏, –ø–æ–∫–∞ –æ–Ω–∏ –Ω–µ –Ω–∞—á–∞–ª–∏ —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å.",
        "–°—Ç–∏—Ä–∞–ª–∫–∞ ‚Äî –Ω–µ —Ñ–æ–Ω–¥—é—à–Ω–∏—Ü–∞. –ó–∞–≥—Ä—É–∂–∞–π –µ—ë –ø–æ–ª–Ω–æ—Å—Ç—å—é, –Ω–æ –Ω–µ –¥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —â—ë–ª–∫–Ω–∏ ‚Äî –∏ –≤–∑–æ—Ä–≤—ë—Ç—Å—è. –ò –¥–∞, —Ä–µ–∂–∏–º 30¬∞C ‚Äî —Ç–≤–æ–π –¥—Ä—É–≥.–ö–∏–ø—è—Ç–∏—Ç—å –º–æ–∂–Ω–æ —á–∞–π–Ω–∏–∫, –∞ –Ω–µ —Ñ—É—Ç–±–æ–ª–∫–∏.",
        "–í–æ–¥–∞ –∫–∞–ø–∞–µ—Ç? –≠—Ç–æ –ø–ª–∞—á–µ—Ç —Ç–≤–æ–π –∫–æ—à–µ–ª—ë–∫! –ü–æ—á–∏–Ω–∏ –∫—Ä–∞–Ω, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω –≤—Å–µ–≥–æ –ª–∏—à—å –ø–æ—ë—Ç —Ç–µ–±–µ –ø–µ—á–∞–ª—å–Ω—ã–µ –±–∞–ª–ª–∞–¥—ã.–ê –µ—â—ë –ø–æ—Å—Ç–∞–≤—å—Ç–µ –±—É—Ç—ã–ª–∫—É –≤ –±–∞—á–æ–∫ —É–Ω–∏—Ç–∞–∑–∞ ‚Äî –ø—É—Å—Ç—å —ç–∫–æ–Ω–æ–º–∏—Ç –≤–æ–¥—É, –ø–æ–∫–∞ —Ç—ã —ç–∫–æ–Ω–æ–º–∏—à—å –¥–µ–Ω—å–≥–∏.",
        "–ó–∞—Ä—è–¥–∫–∞ ‚Äî –Ω–µ —É–∫—Ä–∞—à–µ–Ω–∏–µ. –í—ã–¥—ë—Ä–≥–∏–≤–∞–π –∑–∞—Ä—è–¥–∫—É –∏–∑ —Ä–æ–∑–µ—Ç–∫–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –µ—Å–ª–∏ —É —Ç–µ–±—è –∫–æ—Ç —Å –ø—ã—Ç–ª–∏–≤—ã–º —É–º–æ–º –∏ —Å—Ç–∞–ª—å–Ω—ã–º–∏ –∫–æ–≥—Ç—è–º–∏.–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–∂–∞–µ—Ç, –∞ –Ω–æ–≤—ã–µ –ø—Ä–æ–≤–æ–¥–∞ ‚Äî —Ç–æ–∂–µ –Ω–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ.",
        "–ú–∞–≥–∞–∑–∏–Ω—ã ‚Äî —ç—Ç–æ –∫–≤–µ—Å—Ç, –∞ –Ω–µ —Ç–µ—Ä–∞–ø–∏—è. –•–æ–¥–∏ –∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏ —Å —Å–ø–∏—Å–∫–æ–º –∏ —Å—ã—Ç—ã–º.–ò–Ω–∞—á–µ –∫—É–ø–∏—à—å —Ç—Ä–∏ –ø–∞–∫–µ—Ç–∞ —á–∏–ø—Å–æ–≤, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω–∏ —Å–º–æ—Ç—Ä—è—Ç —Å —Ç–æ—Å–∫–æ–π. –ì–æ–ª–æ–¥–Ω—ã–π —à–æ–ø–∏–Ω–≥ ‚Äî –≤—Ä–∞–≥ –±—é–¥–∂–µ—Ç–∞!üòÑ"
        ]
    tip = random.choice(tips)
    await message.answer(tip)

@dp.message(F.text == '–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã')
async def finances(message: types.Message, state: FSMContext):
    await state.set_state(FinanceForm.category1)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")

@dp.message(FinanceForm.category1)
async def finances(message: types.Message, state: FSMContext):
    await state.update_data(category1=message.text)
    await state.set_state(FinanceForm.expenses1)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ—Ä–≥–æ—Ä–∏—é")

@dp.message(FinanceForm.expenses1)
async def finances(message: types.Message, state: FSMContext):
    await state.update_data(expenses1=float(message.text))
    await state.set_state(FinanceForm.category2)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")

@dp.message(FinanceForm.category2)
async def finances(message: types.Message, state: FSMContext):
    await state.update_data(category2=message.text)
    await state.set_state(FinanceForm.expenses2)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ—Ä–≥–æ—Ä–∏—é")

@dp.message(FinanceForm.expenses2)
async def finances(message: types.Message, state: FSMContext):
    await state.update_data(expenses2=float(message.text))
    await state.set_state(FinanceForm.category3)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤")

@dp.message(FinanceForm.category3)
async def finances(message: types.Message, state: FSMContext):
    await state.update_data(category3=message.text)
    await state.set_state(FinanceForm.expenses3)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ —ç—Ç—É –∫–∞—Ç–µ—Ä–≥–æ—Ä–∏—é")

@dp.message(FinanceForm.expenses3)
async def finances(message: types.Message, state: FSMContext):
    data = await state.get_data()
    telegram_id = message.from_user.id
    cur.execute('''
                UPDATE users 
                SET category1 = ?, expenses1 = ?, 
                    category2 = ?, expenses2 = ?, 
                    category3 = ?, expenses3 = ? 
                WHERE telegram_id = ?
            ''', (
        data['category1'], data['expenses1'],
        data['category2'], data['expenses2'],
        data['category3'], float(message.text),
        telegram_id
    ))
    conn.commit()

    await state.clear()
    await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())